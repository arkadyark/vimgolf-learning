int WaterAdder::OnTimer(Universe u)
{
  const int MyVarTypeId = Universe::TYPE_ID_PLANETARY_SYSTEM;
  Universe::Object MyVarSunTemplate;
  this->InitializeTheSun(MyVarSunTemplate);

  // auto & MyVarBrightStar = ptheir_->StarClass("G2V");
  // Fails after some time passes in u:
  // Assert(Universe::IsElement(MyVarSunTemplate, MyVarBrightStar));

  // Just to doublecheck.
  Assert(MY_VARIANT(ptheir_->OTHER_GUYS_VAR).IsEqual(MyVarSunTemplate));

  // TODO: initialize MyVarEarthTemplate

  Universe::TYPE_ID_INFO<MyVarTypeId>::Type MyVarSolarSystemTemplate();
  MyVarSolarSystemTemplate.Add({MyVarSunTemplate,
    ptheir_->THEIR_VAR_MERCURY, ptheir_->THEIR_VAR_VENUS,
    MyVarEarthTemplate});

  Universe::TYPE_ID_INFO<MyVarTypeId>::Type *MyVarSolarSystem =
    u.SearchByTemplate<MyVarTypeId>(MyVarSolarSystemTemplate);
  Assert(MY_VARIABLE_CHECK(MyVarSolarSystem));
  
  auto & MyVarSun = MyVarSolarSystem->GetStar(0);
  auto MyVarMass = MyVarSun.GetMass();
  auto MyVarDist = Universe::Quantity::Meters(MyVarMass.InKg() * 1e-20);
  Universe::Quantity::VELOCITY_T::Type v;
  Assert(GeneralRelativity::GetOrbitalVelocity(u, MyVarMass,
    MyVarDist, &v));
  auto MyVarVelocity = vector4<Universe::Quantity::TYPE_SPEED::Type>::From3(
    GeneralRelativity::c, rnd.UnitVector3() * v);
  vector3 MyVarPosition = GeneralRelativity::RegularizedShift(u, 
    MyVarSun.GetPos(), rnd.UnitVector3(), MyVarDist);
  auto MyVarWaterMass = std::max( MyVarMass * 4e-17,
    Universe::Quantity::Kg(63311*1.0e9));

  // Let the fun begin.
  WaterAdder::AddWater(u, MyVarWaterMass, MyVarPosition, MyVarVelocity);

  WaterAdder::SetTimer(Universe::Quantity::Second());
}
// TODO: Don't use long variable names like
// MyVarSolarSystemTemplateCheckerForWaterAdder
